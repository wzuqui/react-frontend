{"version":3,"sources":["services/entities/decorators/index.ts","services/entities/decorators/RegistraDecoradorPropriedade.ts","services/entities/decorators/Etiqueta.ts","services/entities/decorators/Formatacao.ts","services/entities/decorators/Ordem.ts","services/entities/decorators/Componente.ts","services/entities/decorators/Tipo.ts","services/entities/decorators/Alinhamento.ts","services/entities/decorators/PermitirFiltro.ts"],"names":["RegistraDecoradorPropriedade","nome","destino","propriedade","valor","Reflect","hasMetadata","constructor","defineMetadata","valorAtual","getMetadata","Etiqueta","Etiquetas","entity","Formatacao","Formatacoes","Ordem","Ordens","Componente","Componentes","Tipo","Tipos","Alinhamento","Alinhamentos","PermitirFiltro","PermitirFiltros"],"mappings":"+HAAA,q0B,iCCAO,SAASA,EAA6BC,EAAcC,EAAiBC,EAA8BC,GACnGC,QAAQC,YAAYL,EAAMC,EAAQK,cACrCF,QAAQG,eAAeP,EAAM,GAAIC,EAAQK,aAE3C,IAAME,EAAaJ,QAAQK,YAAYT,EAAMC,EAAQK,aACrDE,EAAWN,GAAeC,EAC1BC,QAAQG,eAAeP,EAAMQ,EAAYP,EAAQK,aANnD,qE,iCCAA,+GAOaI,EAAW,SAACP,GACvB,OAAO,SAACF,EAAiBC,GACvBH,uCAA6B,WAAYE,EAASC,EAAaC,KAI5D,SAASQ,EAAaC,GAC3B,OAAOR,QAAQK,YAAY,WAAYG,K,iCCdzC,mHAOaC,EAAa,SAACV,GACzB,OAAO,SAACF,EAAiBC,GACvBH,uCAA6B,aAAcE,EAASC,EAAaC,KAI9D,SAASW,EAAeF,GAC7B,OAAOR,QAAQK,YAAY,aAAcG,K,iCCd3C,yGAOaG,EAAQ,SAACZ,GACpB,OAAO,SAACF,EAAiBC,GACvBH,uCAA6B,QAASE,EAASC,EAAaC,KAIzD,SAASa,EAAUJ,GACxB,OAAOR,QAAQK,YAAY,QAASG,K,iCCdtC,mHAOaK,EAAa,SAACd,GACzB,OAAO,SAACF,EAAiBC,GACvBH,uCAA6B,aAAcE,EAASC,EAAaC,KAI9D,SAASe,EAAeN,GAC7B,OAAOR,QAAQK,YAAY,aAAcG,K,iCCd3C,uGAOaO,EAAO,SAAChB,GACnB,OAAO,SAACF,EAAiBC,GACvBH,uCAA6B,OAAQE,EAASC,EAAaC,KAIxD,SAASiB,EAASR,GACvB,OAAOR,QAAQK,YAAY,OAAQG,K,iCCdrC,qHAOaS,EAAc,SAAClB,GAC1B,OAAO,SAACF,EAAiBC,GACvBH,uCAA6B,cAAeE,EAASC,EAAaC,KAI/D,SAASmB,EAAgBV,GAC9B,OAAOR,QAAQK,YAAY,cAAeG,K,iCCd5C,2HAOaW,EAAiB,SAACpB,GAC7B,OAAO,SAACF,EAAiBC,GACvBH,uCAA6B,iBAAkBE,EAASC,EAAaC,KAIlE,SAASqB,EAAmBZ,GACjC,OAAOR,QAAQK,YAAY,iBAAkBG","file":"static/js/4.a78e39b5.chunk.js","sourcesContent":["export * from './Etiqueta';\nexport * from './Formatacao';\nexport * from './Ordem';\nexport * from './Componente';\nexport * from './Tipo';\nexport * from './Alinhamento';\nexport * from './PermitirFiltro';","export function RegistraDecoradorPropriedade(nome: string, destino: Object, propriedade: string | symbol, valor: any) {\n  if (!Reflect.hasMetadata(nome, destino.constructor)) {\n    Reflect.defineMetadata(nome, {}, destino.constructor);\n  }\n  const valorAtual = Reflect.getMetadata(nome, destino.constructor);\n  valorAtual[propriedade] = valor;\n  Reflect.defineMetadata(nome, valorAtual, destino.constructor);\n}\n","import 'reflect-metadata';\nimport { RegistraDecoradorPropriedade } from './RegistraDecoradorPropriedade';\n\nexport interface IEtiqueta {\n  [key: string]: string;\n}\n\nexport const Etiqueta = (valor: string): PropertyDecorator => {\n  return (destino: Object, propriedade: string | symbol) => {\n    RegistraDecoradorPropriedade('Etiqueta', destino, propriedade, valor);\n  };\n};\n\nexport function Etiquetas<T>(entity: new () => T) {\n  return Reflect.getMetadata('Etiqueta', entity) as IEtiqueta;\n}\n","import 'reflect-metadata';\nimport { RegistraDecoradorPropriedade } from './RegistraDecoradorPropriedade';\n\nexport interface IFormatacao {\n  [key: string]: string;\n}\n\nexport const Formatacao = (valor: string): PropertyDecorator => {\n  return (destino: Object, propriedade: string | symbol) => {\n    RegistraDecoradorPropriedade('Formatacao', destino, propriedade, valor);\n  };\n};\n\nexport function Formatacoes<T>(entity: new () => T) {\n  return Reflect.getMetadata('Formatacao', entity) as IFormatacao;\n}\n","import 'reflect-metadata';\nimport { RegistraDecoradorPropriedade } from './RegistraDecoradorPropriedade';\n\nexport interface IOrdem {\n  [key: string]: number;\n}\n\nexport const Ordem = (valor: number): PropertyDecorator => {\n  return (destino: Object, propriedade: string | symbol) => {\n    RegistraDecoradorPropriedade('Ordem', destino, propriedade, valor);\n  };\n};\n\nexport function Ordens<T>(entity: new () => T) {\n  return Reflect.getMetadata('Ordem', entity) as IOrdem;\n}\n","import 'reflect-metadata';\nimport { RegistraDecoradorPropriedade } from './RegistraDecoradorPropriedade';\n\nexport interface IComponente {\n  [key: string]: React.ComponentType<any>;\n}\n\nexport const Componente = (valor: React.ComponentType<any>): PropertyDecorator => {\n  return (destino: Object, propriedade: string | symbol) => {\n    RegistraDecoradorPropriedade('Componente', destino, propriedade, valor)\n  };\n};\n\nexport function Componentes<T>(entity: new () => T) {\n  return Reflect.getMetadata('Componente', entity) as IComponente;\n}","import 'reflect-metadata';\nimport { RegistraDecoradorPropriedade } from './RegistraDecoradorPropriedade';\n\nexport interface ITipo {\n  [key: string]: 'string' | 'number' | 'date' | 'boolean' | 'object' | 'datetime';\n}\n\nexport const Tipo = (valor: 'string' | 'number' | 'date' | 'boolean' | 'object' | 'datetime'): PropertyDecorator => {\n  return (destino: Object, propriedade: string | symbol) => {\n    RegistraDecoradorPropriedade('Tipo', destino, propriedade, valor)\n  };\n};\n\nexport function Tipos<T>(entity: new () => T) {\n  return Reflect.getMetadata('Tipo', entity) as ITipo;\n}\n","import 'reflect-metadata';\nimport { RegistraDecoradorPropriedade } from './RegistraDecoradorPropriedade';\n\nexport interface IAlinhamento {\n  [key: string]: 'center' | 'left' | 'right';\n}\n\nexport const Alinhamento = (valor: 'center' | 'left' | 'right'): PropertyDecorator => {\n  return (destino: Object, propriedade: string | symbol) => {\n    RegistraDecoradorPropriedade('Alinhamento', destino, propriedade, valor)\n  };\n};\n\nexport function Alinhamentos<T>(entity: new () => T) {\n  return Reflect.getMetadata('Alinhamento', entity) as IAlinhamento;\n}\n","import 'reflect-metadata';\nimport { RegistraDecoradorPropriedade } from './RegistraDecoradorPropriedade';\n\nexport interface IPermitirFiltro {\n  [key: string]: boolean;\n}\n\nexport const PermitirFiltro = (valor: boolean): PropertyDecorator => {\n  return (destino: Object, propriedade: string | symbol) => {\n    RegistraDecoradorPropriedade('PermitirFiltro', destino, propriedade, valor);\n  };\n};\n\nexport function PermitirFiltros<T>(entity: new () => T) {\n  return Reflect.getMetadata('PermitirFiltro', entity) as IPermitirFiltro;\n}\n"],"sourceRoot":""}